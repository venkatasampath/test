{
	"info": {
		"_postman_id": "941e17bb-f86f-4c58-968a-be63f9fa7a17",
		"name": "IsotopeTeam",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "isotopes",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "GET a Isotope",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"if (jsonData.status === \"success\"){",
											"    pm.test(\"Status code is 200. Successfully retrieve the data.\");",
											"",
											"    pm.test(\"Application name is correct from the response\", () => {",
											"    pm.expect(jsonData.meta.app).to.be.a(\"string\",\"CoRA - Commingled Remains Analytics\");",
											"        });",
											"",
											"    pm.test(\"Test data type of the id response\", () => {",
											"    pm.expect(jsonData.data.id).to.be.a(\"number\");",
											"    });",
											"",
											"    pm.test(\"Test status of the response\", () => {",
											"    pm.expect(jsonData.status).to.be.a(\"string\",\"success\");",
											"    });",
											"} else if (jsonData.message === \"Unauthenticated.\"){",
											"    pm.test(\"Error. Please provide the authentication.\");",
											"}",
											"else {",
											"    pm.test(\"Error. Please check the request again.\")",
											"}",
											"pm.test(\"Response time is less than 2000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/isotopes/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"isotopes",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"type": "string",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Successful response of Isotope information",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/isotopes/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"isotopes",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "x-next",
											"value": "commodo reprehenderit",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"data\": [],\n \"links\": {},\n \"meta\": {},\n \"status\": \"\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/isotopes/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"isotopes",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -24715994,\n \"message\": \"ut commodo\"\n}"
								}
							]
						},
						{
							"name": "Update Isotope",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"if (jsonData.status === \"success\"){",
											"    pm.test(\"Status code is 200. Successfully updated the dna data.\");",
											"",
											"    pm.test(\"Application name is correct from the response\", () => {",
											"    pm.expect(jsonData.meta.app).to.be.a(\"string\",\"CoRA - Commingled Remains Analytics\");",
											"        });",
											"",
											"    pm.test(\"Test data type of the id response\", () => {",
											"    pm.expect(jsonData.data.id).to.eql(31);",
											"    });",
											"",
											"    pm.test(\"Test status of the response\", () => {",
											"    pm.expect(jsonData.status).to.be.a(\"string\",\"success\");",
											"    });",
											"} ",
											"else if (jsonData.message === \"Unauthenticated.\"){",
											"    pm.test(\"Error. Please provide the authentication.\");",
											"}",
											"else {",
											"    pm.test(\"Error. Please check the request again.\")",
											"}",
											"pm.test(\"Response time is less than 2000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"external_case_id\": \"2004H2020\",\n\t\"c_weight\": \"1.1\",\n\t\"c_delta\": \"0.5\",\n\t\"c_percent\": \"5\",\n\t\"c_to_n_ratio\": \"0.1\",\n\t\"c_to_o_ratio\": \"0.2\",\n    \"weight_sample_cleaned\": \"50\",\n    \"weight_vial_lid\": \"100\",\n    \"weight_sample_vial_lid\": \"110\",\n    \"weight_collagen\": \"10\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/isotopes/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"isotopes",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "31"
										}
									]
								}
							},
							"response": [
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/isotopes/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"isotopes",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -24715994,\n \"message\": \"ut commodo\"\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/isotopes/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"isotopes",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "x-next",
											"value": "commodo reprehenderit",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"data\": [],\n \"links\": {},\n \"meta\": {},\n \"status\": \"\"\n}"
								}
							]
						},
						{
							"name": "Delete Isotope",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"if (jsonData.data === \"Resource deleted successfully\"){",
											"    pm.test(\"Status code is 200. Resource deleted successfully\");",
											"} ",
											"else if (jsonData.message === \"Unauthenticated.\"){",
											"    pm.test(\"Error. Please provide the authentication.\");",
											"}",
											"else {",
											"    pm.test(\"Error!!!Status code is 404 - Data not found.Please enter a valid id.\");",
											"}",
											"",
											"pm.test(\"Response time is less than 1000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/isotopes/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"isotopes",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "76"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/isotopes/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"isotopes",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "x-next",
											"value": "commodo reprehenderit",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"data\": [],\n \"links\": {},\n \"meta\": {},\n \"status\": \"\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/isotopes/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"isotopes",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -24715994,\n \"message\": \"ut commodo\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "GET all Isotopes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"if (jsonData.status === \"success\"){",
									"    pm.test(\"Status code is 200. Successfully retrieve the data.\");",
									"",
									"    pm.test(\"Application name is correct from the response\", () => {",
									"    pm.expect(jsonData.meta.app).to.be.a(\"string\",\"CoRA - Commingled Remains Analytics\");",
									"        });",
									"",
									"    pm.test(\"Test data type of the id response\", () => {",
									"    pm.expect(jsonData.data[0].id).to.be.a(\"number\");",
									"    });",
									"",
									"    pm.test(\"Test status of the response\", () => {",
									"    pm.expect(jsonData.status).to.be.a(\"string\",\"success\");",
									"    });",
									"} else if (jsonData.message === \"Unauthenticated.\"){",
									"    pm.test(\"Error. Please provide the authentication.\");",
									"}",
									"else {",
									"    pm.test(\"Error. Please check the request again.\")",
									"}",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/isotopes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"isotopes"
							]
						}
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/isotopes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"isotopes"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": -24715994,\n \"message\": \"ut commodo\"\n}"
						},
						{
							"name": "Successful response of Isotope information",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/isotopes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"isotopes"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "x-next",
									"value": "commodo reprehenderit",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"data\": [],\n \"links\": {},\n \"meta\": {},\n \"status\": \"\"\n}"
						}
					]
				},
				{
					"name": "create Isotope",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"pm.globals.set('id',jsonData.data.id)",
									"pm.environment.set('id',jsonData.data.id)",
									"if (jsonData.status === \"success\"){",
									"    pm.test(\"Status code is 201. Successfully created the dna data.\");",
									"",
									"    pm.test(\"Application name is correct from the response\", () => {",
									"    pm.expect(jsonData.meta.app).to.be.a(\"string\",\"CoRA - Commingled Remains Analytics\");",
									"        });",
									"",
									"    pm.test(\"Test data type of the id response\", () => {",
									"    pm.expect(jsonData.data.id).to.be.a(\"number\");",
									"    });",
									"",
									"    pm.test(\"Test status of the response\", () => {",
									"    pm.expect(jsonData.status).to.be.a(\"string\",\"success\");",
									"    });",
									"} ",
									"else if (jsonData.message === \"Unauthenticated.\"){",
									"    pm.test(\"Error. Please provide the authentication.\");",
									"}",
									"else {",
									"    pm.test(\"Error. Please check the request again.\")",
									"}",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"org_id\": \"2\",\n\t\"project_id\": \"2\",\n\t\"sb_id\": \"37\",\n\t\"se_id\": \"4031\",\n\t\"lab_id\": \"1\",\n\t\"sample_number\": \"02X\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/isotopes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"isotopes"
							]
						}
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/isotopes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"isotopes"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": -24715994,\n \"message\": \"ut commodo\"\n}"
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/isotopes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"isotopes"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "x-next",
									"value": "commodo reprehenderit",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"data\": [],\n \"links\": {},\n \"meta\": {},\n \"status\": \"\"\n}"
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "{{base_url}}/api",
			"type": "string"
		}
	]
}